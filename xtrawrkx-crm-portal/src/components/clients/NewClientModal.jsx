"use client";

import { useState } from "react";
import { Input, Select, Button } from "../../../../../../../../components/ui";
import { X, Building2, Plus } from "lucide-react";
import { BaseModal } from "../ui";

export default function NewClientModal({ isOpen, onClose, onAddClient }) {
  const [formData, setFormData] = useState({
    name: "",
    industry: "",
    primaryContact: "",
    owner: "",
    status: "prospect",
    website: "",
    email: "",
    phone: "",
    address: {
      city: "",
      state: "",
      country: "USA"
    },
    tags: []
  });

  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const industries = [
    "Technology", "Healthcare", "Finance", "Manufacturing", "Retail", 
    "Consulting", "SaaS", "Marketing", "Education", "Real Estate"
  ];

  const statuses = [
    { value: "prospect", label: "Prospect" },
    { value: "active", label: "Active" },
    { value: "on-hold", label: "On Hold" },
    { value: "inactive", label: "Inactive" }
  ];

  const owners = [
    "John Smith", "Jane Doe", "Mike Johnson", "Sarah Wilson", "Alex Brown"
  ];

  const commonTags = [
    "enterprise", "startup", "vip", "high-value", "priority", "technology",
    "saas", "consulting", "marketing", "growth", "mid-market", "research"
  ];

  const validateForm = () => {
    const errors = {};
    
    if (!formData.name.trim()) errors.name = "Company name is required";
    if (!formData.industry.trim()) errors.industry = "Industry is required";
    if (!formData.primaryContact.trim()) errors.primaryContact = "Primary contact is required";
    if (!formData.owner.trim()) errors.owner = "Owner is required";
    if (!formData.email.trim()) errors.email = "Email is required";
    if (!formData.phone.trim()) errors.phone = "Phone is required";
    
    if (formData.email && !/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = "Please enter a valid email address";
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      const newClient = {
        id: Date.now(), // In real app, this would be generated by the backend
        ...formData,
        logo: null,
        lastActivity: new Date().toISOString().split('T')[0],
        createdAt: new Date().toISOString().split('T')[0],
        linkedProjectsCount: 0,
        linkedDealsCount: 0,
        linkedContactsCount: 1,
        totalDealValue: 0,
        engagementScore: 0
      };

      onAddClient(newClient);
      handleClose();
    } catch (error) {
      console.error('Error adding client:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setFormData({
      name: "",
      industry: "",
      primaryContact: "",
      owner: "",
      status: "prospect",
      website: "",
      email: "",
      phone: "",
      address: {
        city: "",
        state: "",
        country: "USA"
      },
      tags: []
    });
    setFormErrors({});
    onClose();
  };

  const handleInputChange = (field, value) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setFormData(prev => ({ ...prev, [field]: value }));
    }
    
    if (formErrors[field]) {
      setFormErrors(prev => ({ ...prev, [field]: "" }));
    }
  };

  const handleTagToggle = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.includes(tag)
        ? prev.tags.filter(t => t !== tag)
        : [...prev.tags, tag]
    }));
  };

  if (!isOpen) return null;

  return (
    <BaseModal isOpen={isOpen} onClose={onClose} size="big">
      <div className="p-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-yellow-400/20 to-yellow-500/20 backdrop-blur-md border border-yellow-300/40 rounded-lg flex items-center justify-center shadow-lg">
              <Building2 className="w-4 h-4 text-yellow-600" />
            </div>
            <div>
              <h2 id="modal-title" className="text-xl font-semibold text-gray-900">Add New Client</h2>
              <p className="text-xs text-gray-600">Create a new client account</p>
            </div>
          </div>
          <button
            onClick={handleClose}
            className="p-1.5 hover:bg-gray-100 rounded-lg transition-colors"
            aria-label="Close modal"
          >
            <X className="w-4 h-4 text-gray-500" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Basic Information */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Company Name *</label>
              <Input
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="Enter company name"
                error={formErrors.name}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Industry *</label>
              <Select
                value={formData.industry}
                onChange={(value) => handleInputChange('industry', value)}
                options={[
                  { value: "", label: "Select industry" },
                  ...industries.map(industry => ({ value: industry, label: industry }))
                ]}
                error={formErrors.industry}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Primary Contact *</label>
              <Input
                value={formData.primaryContact}
                onChange={(e) => handleInputChange('primaryContact', e.target.value)}
                placeholder="Enter primary contact name"
                error={formErrors.primaryContact}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Owner *</label>
              <Select
                value={formData.owner}
                onChange={(value) => handleInputChange('owner', value)}
                options={[
                  { value: "", label: "Select owner" },
                  ...owners.map(owner => ({ value: owner, label: owner }))
                ]}
                error={formErrors.owner}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <Select
                value={formData.status}
                onChange={(value) => handleInputChange('status', value)}
                options={statuses}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Website</label>
              <Input
                value={formData.website}
                onChange={(e) => handleInputChange('website', e.target.value)}
                placeholder="https://company.com"
              />
            </div>
          </div>

          {/* Contact Information */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
              <Input
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="Enter email address"
                error={formErrors.email}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Phone *</label>
              <Input
                value={formData.phone}
                onChange={(e) => handleInputChange('phone', e.target.value)}
                placeholder="Enter phone number"
                error={formErrors.phone}
              />
            </div>
          </div>

          {/* Address Information */}
          <div className="grid grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">City</label>
              <Input
                value={formData.address.city}
                onChange={(e) => handleInputChange('address.city', e.target.value)}
                placeholder="Enter city"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">State</label>
              <Input
                value={formData.address.state}
                onChange={(e) => handleInputChange('address.state', e.target.value)}
                placeholder="Enter state"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Country</label>
              <Select
                value={formData.address.country}
                onChange={(value) => handleInputChange('address.country', value)}
                options={[
                  { value: "USA", label: "United States" },
                  { value: "CAN", label: "Canada" },
                  { value: "UK", label: "United Kingdom" },
                  { value: "AUS", label: "Australia" }
                ]}
              />
            </div>
          </div>

          {/* Tags */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Tags</label>
            <div className="flex flex-wrap gap-2">
              {commonTags.map(tag => (
                <button
                  key={tag}
                  type="button"
                  onClick={() => handleTagToggle(tag)}
                  className={`px-3 py-1 text-sm rounded-full border transition-colors ${
                    formData.tags.includes(tag)
                      ? 'bg-yellow-100 border-yellow-300 text-yellow-800'
                      : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {tag}
                </button>
              ))}
            </div>
            {formData.tags.length > 0 && (
              <div className="mt-2 text-sm text-gray-600">
                Selected: {formData.tags.join(', ')}
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex items-center justify-end gap-3 mt-6">
            <Button variant="outline" onClick={handleClose} className="px-4 py-2 text-sm">
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 text-sm bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-500 hover:to-yellow-600 text-white border-0 shadow-lg"
            >
              {isSubmitting ? "Adding..." : "Add Client"}
            </Button>
          </div>
        </form>
      </div>
    </BaseModal>
  );
}
