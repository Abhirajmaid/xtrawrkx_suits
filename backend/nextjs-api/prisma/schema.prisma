// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== XTRAWKRX INTERNAL USERS =====
model XtrawrkxUser {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  password      String? // Optional for Firebase-only users
  firebaseUid   String?   @unique // Firebase UID for hybrid auth
  role          String    @default("DEVELOPER") // ADMIN, MANAGER, SALES_REP, PROJECT_MANAGER, DEVELOPER, DESIGNER
  department    String    @default("DEVELOPMENT") // MANAGEMENT, SALES, DELIVERY, DEVELOPMENT, DESIGN
  isActive      Boolean   @default(true)
  profileImage  String?
  hiredDate     DateTime? // Optional for Firebase users
  authProvider  String    @default("PASSWORD") // PASSWORD, FIREBASE, HYBRID
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations - Ownership
  ownedAccounts     Account[]
  ownedContacts     Contact[]
  ownedLeads        Lead[]
  ownedDeals        Deal[]
  managedProjects   Project[]
  assignedTasks     Task[]
  assignedSubtasks  Subtask[]
  createdActivities Activity[]

  // Relations - Work
  timeEntries      TimeEntry[]
  createdFiles     File[]
  createdTemplates EmailTemplate[]
  createdCampaigns EmailCampaign[]
  createdProposals Proposal[]
  leadImports      LeadImport[]
  createdContracts Contract[]
  createdInvoices  Invoice[]
  createdReports   Report[]

  // Relations - System
  sessions           UserSession[]
  auditLogs          AuditLog[]
  notifications      Notification[]
  userRoles          UserRole[]
  assignedActivities Activity[]     @relation("ActivityAssignee")
  taskComments       TaskComment[]

  @@map("xtrawrkx_users")
}

model UserRole {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  isSystemRole Boolean        @default(false)
  users        XtrawrkxUser[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("user_roles")
}

// ===== CLIENT COMPANIES =====
model Account {
  id           String       @id @default(cuid())
  companyName  String       @unique
  industry     String
  type         String       @default("CUSTOMER") // CUSTOMER, PROSPECT, PARTNER, VENDOR
  website      String?
  phone        String?
  email        String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  employees    String? // Company size range
  description  String?
  founded      String?
  linkedIn     String?
  twitter      String?
  revenue      Float?
  healthScore  Int?
  ownerId      String
  owner        XtrawrkxUser @relation(fields: [ownerId], references: [id])
  source       String       @default("MANUAL") // ONBOARDING, LEAD_CONVERSION, MANUAL, IMPORT
  lastActivity DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  contacts       Contact[]
  deals          Deal[]
  projects       Project[]
  activities     Activity[]
  proposals      Proposal[]
  contracts      Contract[]
  invoices       Invoice[]
  portalAccess   ClientPortalAccess[]
  files          File[]
  convertedLeads Lead[]

  @@map("accounts")
}

// ===== CONTACT PERSONS =====
model Contact {
  id              String       @id @default(cuid())
  accountId       String
  account         Account      @relation(fields: [accountId], references: [id])
  firstName       String
  lastName        String
  email           String       @unique
  phone           String?
  title           String?
  department      String?
  role            String       @default("USER") // DECISION_MAKER, INFLUENCER, USER, GATEKEEPER, PRIMARY_CONTACT
  status          String       @default("ACTIVE") // ACTIVE, INACTIVE, LEFT_COMPANY
  address         String?
  birthday        DateTime?
  profileImage    String?
  linkedIn        String?
  twitter         String?
  assignedToId    String
  assignedTo      XtrawrkxUser @relation(fields: [assignedToId], references: [id])
  lastContactDate DateTime?
  source          String       @default("MANUAL") // ONBOARDING, LEAD_CONVERSION, MANUAL, EXTENSION, IMPORT
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  deals                Deal[]
  activities           Activity[]
  communityMemberships CommunityMembership[]
  portalAccess         ClientPortalAccess?
  files                File[]
  convertedLeads       Lead[]
  proposals            Proposal[]            @relation("ProposalContact")
  proposalsSentTo      Proposal[]            @relation("ProposalSentTo")
  contracts            Contract[]            @relation("ContractContact")
  contractsSignedBy    Contract[]            @relation("ContractSignedBy")

  @@map("contacts")
}

// ===== LEAD MANAGEMENT =====
model Lead {
  id              String       @id @default(cuid())
  leadName        String
  companyName     String
  email           String
  phone           String?
  website         String?
  industry        String?
  size            String?
  status          String       @default("NEW") // NEW, CONTACTED, QUALIFIED, LOST, CONVERTED
  score           Int?
  source          String       @default("MANUAL") // EXTENSION, MANUAL, IMPORT, WEBSITE, REFERRAL
  assignedToId    String
  assignedTo      XtrawrkxUser @relation(fields: [assignedToId], references: [id])
  notes           String?
  lastContactDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Conversion tracking
  convertedAccountId String?
  convertedAccount   Account? @relation(fields: [convertedAccountId], references: [id])
  convertedContactId String?
  convertedContact   Contact? @relation(fields: [convertedContactId], references: [id])

  // Relations
  emailLogs  EmailLog[]
  activities Activity[]

  @@map("leads")
}

model LeadImport {
  id                String       @id @default(cuid())
  fileName          String
  importType        String // CSV, EXCEL
  totalRecords      Int
  processedRecords  Int
  successfulRecords Int
  failedRecords     Int
  status            String       @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  importedById      String
  importedBy        XtrawrkxUser @relation(fields: [importedById], references: [id])
  completedAt       DateTime?
  createdAt         DateTime     @default(now())

  @@map("lead_imports")
}

// ===== DEAL/PROJECT MANAGEMENT =====
model Deal {
  id           String       @id @default(cuid())
  accountId    String
  account      Account      @relation(fields: [accountId], references: [id])
  contactId    String?
  contact      Contact?     @relation(fields: [contactId], references: [id])
  name         String
  stage        String       @default("DISCOVERY") // DISCOVERY, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  value        Float
  probability  Int          @default(50)
  priority     String       @default("MEDIUM") // LOW, MEDIUM, HIGH
  source       String       @default("FROM_ACCOUNT") // FROM_ACCOUNT, FROM_LEAD, MANUAL
  assignedToId String
  assignedTo   XtrawrkxUser @relation(fields: [assignedToId], references: [id])
  closeDate    DateTime?
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  projects   Project[]
  activities Activity[]
  proposals  Proposal[]
  contracts  Contract[]

  @@map("deals")
}

model Project {
  id               String       @id @default(cuid())
  dealId           String?
  deal             Deal?        @relation(fields: [dealId], references: [id])
  accountId        String
  account          Account      @relation(fields: [accountId], references: [id])
  name             String
  description      String?
  status           String       @default("PLANNING") // PLANNING, ACTIVE, IN_PROGRESS, COMPLETED, ON_HOLD, CANCELLED
  startDate        DateTime?
  endDate          DateTime?
  budget           Float?
  spent            Float?
  color            String?
  icon             String?
  projectManagerId String
  projectManager   XtrawrkxUser @relation(fields: [projectManagerId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  tasks       Task[]
  activities  Activity[]
  timeEntries TimeEntry[]
  files       File[]

  @@map("projects")
}

model Task {
  id            String        @id @default(cuid())
  projectId     String
  project       Project       @relation(fields: [projectId], references: [id])
  title         String
  description   String?
  status        String        @default("TODO") // TODO, IN_PROGRESS, IN_REVIEW, DONE, BLOCKED
  priority      String        @default("MEDIUM") // LOW, MEDIUM, HIGH
  progress      Int           @default(0)
  dueDate       DateTime?
  estimatedTime String? // Time estimation
  assigneeId    String?
  assignee      XtrawrkxUser? @relation(fields: [assigneeId], references: [id])
  section       String?
  source        String        @default("PM_DASHBOARD") // CLIENT_PORTAL, PM_DASHBOARD, CRM
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  subtasks    Subtask[]
  activities  Activity[]
  timeEntries TimeEntry[]
  comments    TaskComment[]
  files       File[]

  @@map("tasks")
}

model Subtask {
  id         String        @id @default(cuid())
  taskId     String
  task       Task          @relation(fields: [taskId], references: [id])
  title      String
  status     String        @default("TODO") // TODO, IN_PROGRESS, DONE
  assigneeId String?
  assignee   XtrawrkxUser? @relation(fields: [assigneeId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("subtasks")
}

// ===== ACTIVITIES =====
model Activity {
  id            String        @id @default(cuid())
  type          String // LEAD, CONTACT, ACCOUNT, DEAL, PROJECT, TASK
  activityType  String // CALL, EMAIL, MEETING, NOTE, TASK, DEMO, PROPOSAL
  title         String
  description   String?
  status        String        @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  createdById   String
  createdBy     XtrawrkxUser  @relation(fields: [createdById], references: [id])
  assigneeId    String?
  assignee      XtrawrkxUser? @relation("ActivityAssignee", fields: [assigneeId], references: [id])
  scheduledDate DateTime?
  completedDate DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations to different entities
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  leadId String?
  lead   Lead?   @relation(fields: [leadId], references: [id])

  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@map("activities")
}

// ===== COMMUNITIES =====
model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())

  // Relations
  memberships CommunityMembership[]

  @@map("communities")
}

model CommunityMembership {
  id          String    @id @default(cuid())
  contactId   String
  contact     Contact   @relation(fields: [contactId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  status      String    @default("PENDING") // PENDING, ACTIVE, INACTIVE
  joinedAt    DateTime?
  tier        String? // Bronze, Silver, Gold
  nextTier    String?
  createdAt   DateTime  @default(now())

  @@unique([contactId, communityId])
  @@map("community_memberships")
}

// ===== EMAIL MANAGEMENT =====
model EmailTemplate {
  id          String       @id @default(cuid())
  name        String
  subject     String
  content     String
  category    String?
  isActive    Boolean      @default(true)
  createdById String
  createdBy   XtrawrkxUser @relation(fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  campaigns EmailCampaign[]

  @@map("email_templates")
}

model EmailCampaign {
  id            String        @id @default(cuid())
  templateId    String
  template      EmailTemplate @relation(fields: [templateId], references: [id])
  name          String
  subject       String
  content       String
  status        String        @default("DRAFT") // DRAFT, SCHEDULED, SENDING, SENT, PAUSED
  scheduledDate DateTime?
  createdById   String
  createdBy     XtrawrkxUser  @relation(fields: [createdById], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  emailLogs EmailLog[]

  @@map("email_campaigns")
}

model EmailLog {
  id            String        @id @default(cuid())
  campaignId    String
  campaign      EmailCampaign @relation(fields: [campaignId], references: [id])
  recipientType String // LEAD, CONTACT, ACCOUNT
  recipientId   String
  email         String
  status        String        @default("SENT") // SENT, DELIVERED, OPENED, CLICKED, BOUNCED, UNSUBSCRIBED
  sentAt        DateTime?
  deliveredAt   DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  createdAt     DateTime      @default(now())

  // Relations
  leadId    String?
  lead      Lead?      @relation(fields: [leadId], references: [id])
  proposals Proposal[]

  @@map("email_logs")
}

// ===== PROPOSALS AND CONTRACTS =====
model Proposal {
  id              String       @id @default(cuid())
  dealId          String?
  deal            Deal?        @relation(fields: [dealId], references: [id])
  accountId       String
  account         Account      @relation(fields: [accountId], references: [id])
  contactId       String?
  contact         Contact?     @relation("ProposalContact", fields: [contactId], references: [id])
  title           String
  proposalContent String
  validUntil      DateTime?
  status          String       @default("DRAFT") // DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED
  sentToContactId String?
  sentToContact   Contact?     @relation("ProposalSentTo", fields: [sentToContactId], references: [id])
  createdById     String
  createdBy       XtrawrkxUser @relation(fields: [createdById], references: [id])
  sentAt          DateTime?
  respondedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  contract  Contract?
  emailLogs EmailLog[]

  @@map("proposals")
}

model Contract {
  id                String       @id @default(cuid())
  proposalId        String?      @unique
  proposal          Proposal?    @relation(fields: [proposalId], references: [id])
  dealId            String?
  deal              Deal?        @relation(fields: [dealId], references: [id])
  accountId         String
  account           Account      @relation(fields: [accountId], references: [id])
  contactId         String?
  contact           Contact?     @relation("ContractContact", fields: [contactId], references: [id])
  title             String
  contractContent   String
  contractValue     Float
  status            String       @default("DRAFT") // DRAFT, SENT, SIGNED, ACTIVE, EXPIRED, CANCELLED
  signedByContactId String?
  signedByContact   Contact?     @relation("ContractSignedBy", fields: [signedByContactId], references: [id])
  createdById       String
  createdBy         XtrawrkxUser @relation(fields: [createdById], references: [id])
  signedAt          DateTime?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("contracts")
}

// ===== TIME TRACKING =====
model TimeEntry {
  id          String       @id @default(cuid())
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?        @relation(fields: [taskId], references: [id])
  userId      String
  user        XtrawrkxUser @relation(fields: [userId], references: [id])
  description String
  hours       Float
  date        DateTime
  hourlyRate  Float?
  status      String       @default("DRAFT") // DRAFT, APPROVED, BILLED
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("time_entries")
}

// ===== INVOICING =====
model Invoice {
  id            String       @id @default(cuid())
  accountId     String
  account       Account      @relation(fields: [accountId], references: [id])
  invoiceNumber String       @unique
  issueDate     DateTime
  dueDate       DateTime
  amount        Float
  taxAmount     Float        @default(0)
  totalAmount   Float
  status        String       @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  createdById   String
  createdBy     XtrawrkxUser @relation(fields: [createdById], references: [id])
  sentAt        DateTime?
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  items InvoiceItem[]
  files File[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  totalPrice  Float

  @@map("invoice_items")
}

// ===== NOTIFICATIONS =====
model Notification {
  id        String       @id @default(cuid())
  userId    String
  user      XtrawrkxUser @relation(fields: [userId], references: [id])
  type      String // DEAL_WON, TASK_ASSIGNED, PROJECT_UPDATE, LEAD_ASSIGNED, SYSTEM
  title     String
  message   String
  isRead    Boolean      @default(false)
  readAt    DateTime?
  createdAt DateTime     @default(now())

  @@map("notifications")
}

// ===== REPORTS =====
model Report {
  id          String       @id @default(cuid())
  name        String
  type        String // SALES, PROJECT, TIME, REVENUE, CUSTOM
  status      String       @default("DRAFT") // DRAFT, SCHEDULED, GENERATED, ERROR
  createdById String
  createdBy   XtrawrkxUser @relation(fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("reports")
}

// ===== USER SESSIONS =====
model UserSession {
  id        String       @id @default(cuid())
  userId    String
  user      XtrawrkxUser @relation(fields: [userId], references: [id])
  token     String       @unique
  expiresAt DateTime
  createdAt DateTime     @default(now())

  @@map("user_sessions")
}

// ===== CLIENT PORTAL ACCESS =====
model ClientPortalAccess {
  id          String    @id @default(cuid())
  contactId   String    @unique
  contact     Contact   @relation(fields: [contactId], references: [id])
  password    String
  isActive    Boolean   @default(true)
  accessLevel String    @default("view") // view, comment, upload
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])

  @@map("client_portal_access")
}

// ===== FILE MANAGEMENT =====
model File {
  id           String       @id @default(cuid())
  name         String
  originalName String
  path         String
  size         Int
  mimeType     String
  relatedType  String // PROJECT, TASK, DEAL, CONTACT, ACCOUNT, LEAD, PROPOSAL, CONTRACT
  relatedId    String
  uploadedById String
  uploadedBy   XtrawrkxUser @relation(fields: [uploadedById], references: [id])
  createdAt    DateTime     @default(now())

  // Relations to different entities
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("files")
}

// ===== AUDIT LOG =====
model AuditLog {
  id         String       @id @default(cuid())
  userId     String
  user       XtrawrkxUser @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime     @default(now())

  @@map("audit_logs")
}

// ===== TASK COMMENTS =====
model TaskComment {
  id        String       @id @default(cuid())
  taskId    String
  task      Task         @relation(fields: [taskId], references: [id])
  userId    String
  user      XtrawrkxUser @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("task_comments")
}
